package multitask.Avoiding;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import java.util.ArrayList;

//import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;

import multitask.Rect;


public class Avoiding extends JPanel implements ActionListener {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Timer timer;
    private AvoidingSquare aSqr;
    private ArrayList<Rect> rects;
    private boolean ingame;

    private int[][] pos = { 
        {2380, 29}, {2500, 59}, {1380, 89},
        {590, 80}, {530, 60},{940, 59}, 
        {900, 259}, {660, 50}, {540, 90},
        {810, 220}, {860, 20}, {740, 180},
        {990, 30}, {920, 200},

     };

    public Avoiding() {

        addKeyListener(new TAdapter());
        setFocusable(true);
        setBackground(Color.green);
        setDoubleBuffered(true);
        ingame = true;

        setSize(300, 300);

        aSqr = new AvoidingSquare();

        rects = new ArrayList<Rect>();

        for (int i=0; i<pos.length; i++ ) {
            rects.add(new Rect(pos[i][0], pos[i][1]));
        }

        timer = new Timer(5, this);
        timer.start();
    }
    

    public void paint(Graphics g) {
        super.paint(g);

        if (!ingame) {
        	//System.out.print("gameNotOver");

            Graphics2D g2d = (Graphics2D)g;

            if (aSqr.isVisible())
                g2d.drawImage(aSqr.getImage(), aSqr.getX(), aSqr.getY(),
                              this);

            for (int i = 0; i < rects.size(); i++) {
                Rect a = (Rect)rects.get(i);
                if (a.isVisible())
                    g2d.drawImage(a.getImage(), a.getX(), a.getY(), this);
            }


        } 
        else {
            System.out.print("gameOver");
            timer.stop();
        }

        Toolkit.getDefaultToolkit().sync();
        g.dispose();
    }


    public void actionPerformed(ActionEvent e) {

        if (collision() == false) {
            ingame = false;
        }

        for (int i = 0; i < rects.size(); i++) {
            Rect a = (Rect) rects.get(i);
            if (a.isVisible()) 
                a.move();
            else rects.remove(i);
        }

        aSqr.move();
        collision();
        repaint();  
    }

    public boolean collision() {

        Rectangle r3 = aSqr.getBounds();

        for (int j = 0; j<rects.size(); j++) {
            Rect a = (Rect) rects.get(j);
            Rectangle r2 = a.getBounds();

            if (r3.intersects(r2)) {
                //aSqr.setVisible(false);
                //a.setVisible(false);
                return true;
            }
        
        }
        return false;
    }


    private class TAdapter extends KeyAdapter {

        public void keyReleased(KeyEvent e) {
            aSqr.keyReleased(e);
        }

        public void keyPressed(KeyEvent e) {
            aSqr.keyPressed(e);
        }
    }
}